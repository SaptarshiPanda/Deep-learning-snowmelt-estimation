/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var training = ee.FeatureCollection("projects/saptarshi8485/assets/Training_data_Sikkim");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////Sikkim region trainings////////
//----------------------------------------------------//
var classProperty = 'snow';
var bands = ['B1','B2','B3','B4','B5','B6','B7','B8','B11','B12']
//Creating train and test subsets
var withRandom = training.randomColumn('random');

// We want to reserve some of the data for testing, to avoid overfitting the model.
var split = 0.7;  // Roughly 70% training, 30% testing.
var trainingPartition = withRandom.filter(ee.Filter.lt('random', split));
var testingPartition = withRandom.filter(ee.Filter.gte('random', split));

//----------------------------------------------------------------------//

// Trained with Smile CART
var cartclassifier = ee.Classifier.smileCart().train({
  features: trainingPartition,
  classProperty: classProperty,
  inputProperties: bands
});

// Classify the test FeatureCollection.
var train = trainingPartition.classify(cartclassifier);
var test = testingPartition.classify(cartclassifier);

// Print the confusion matrix.
var trconfusionMatrix = train.errorMatrix(classProperty, 'classification');
var confusionMatrix = test.errorMatrix(classProperty, 'classification');

//Accuracy assesment
var total = training.classify(cartclassifier);
var acc = total.errorMatrix(classProperty, 'classification').accuracy();
print('Smile CART classifier:-\nTraining Confusion Matrix', trconfusionMatrix,
      '\nTesting Confusion Matrix', confusionMatrix,
      '\nTraining accuracy is:',trconfusionMatrix.accuracy(),
      '\nTesting accuracy is:',confusionMatrix.accuracy(),
      '\nTotal accuracy is:',acc);

//-------------------------------------------------------------------//

// Trained with libsvm
var svmclassifier = ee.Classifier.libsvm('voting').train({
  features: trainingPartition,
  classProperty: classProperty,
  inputProperties: bands
});

// Classify the test FeatureCollection.
var train = trainingPartition.classify(svmclassifier);
var test = testingPartition.classify(svmclassifier);

// Print the confusion matrix.
var trconfusionMatrix = train.errorMatrix(classProperty, 'classification');
var confusionMatrix = test.errorMatrix(classProperty, 'classification');

//Accuracy assesment
var total = training.classify(svmclassifier);
var acc = total.errorMatrix(classProperty, 'classification').accuracy();
print('Libsvm classifier:-\nTraining Confusion Matrix', trconfusionMatrix,
      '\nTesting Confusion Matrix', confusionMatrix,
      '\nTraining accuracy is:',trconfusionMatrix.accuracy(),
      '\nTesting accuracy is:',confusionMatrix.accuracy(),
      '\nTotal accuracy is:',acc);

//-------------------------------------------------------------------//

// Trained with Gradient Tree Boost
var gtbclassifier = ee.Classifier.smileGradientTreeBoost({
  numberOfTrees : 5,
  loss : 'LeastSquares'
}).train({
  features: trainingPartition,
  classProperty: classProperty,
  inputProperties: bands
});

// Classify the test FeatureCollection.
var train = trainingPartition.classify(gtbclassifier);
var test = testingPartition.classify(gtbclassifier);

// Print the confusion matrix.
var trconfusionMatrix = train.errorMatrix(classProperty, 'classification');
var confusionMatrix = test.errorMatrix(classProperty, 'classification');

//Accuracy assesment
var total = training.classify(gtbclassifier);
var acc = total.errorMatrix(classProperty, 'classification').accuracy();
print('Gradient Tree Boost classifier:-\nTraining Confusion Matrix', trconfusionMatrix,
      '\nTesting Confusion Matrix', confusionMatrix,
      '\nTraining accuracy is:',trconfusionMatrix.accuracy(),
      '\nTesting accuracy is:',confusionMatrix.accuracy(),
      '\nTotal accuracy is:',acc);

//-------------------------------------------------------------------//